# coding: utf-8

"""
    Chomp Food Database API Documentation

    __Important:__   - An __[API key](https://chompthis.com/api/)__ is required for access to this API. Get yours at __[https://chompthis.com/api](https://chompthis.com/api/)__.  -----  __Getting Started:__   - __[Subscribe](https://chompthis.com/api/#pricing)__ to the API.   - Scroll down and click the \"__Authorize__\" button.   - Enter your API key into the \"__value__\" input, click the \"__Authorize__\" button, then click the \"__Close__\" button.   - Scroll down to the section titled \"__default__\" and click on the API endpoint you wish to use.   - Click the \"__Try it out__\" button.   - Enter the information the endpoint requires.   - Click the \"__Execute__\" button.  __Example:__    - Branded Food: __[View example](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)__ API response object.   - Ingredient: __[View example](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)__ API response object.  -----  __How Do I Find My API Key?__   - Your API key was sent to the email address you used to create your subscription.   - You will also find your API key in the __[Client Center](https://chompthis.com/api/manage.php)__.   - _Read __[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)__ for more information._  ||| | ------- | -------- | | [Knowledge Base](https://desk.zoho.com/portal/chompthis/kb/chomp) | [Pricing](https://chompthis.com/api/) | | [Attribution](https://chompthis.com/api/docs/attribution.php) | [Cost Calculator](https://chompthis.com/api/cost-calculator.php) | | [Terms & License](https://chompthis.com/api/terms.php) | [Database Search](https://chompthis.com/api/lookup.php) | | [Support](https://chompthis.com/api/ticket-new.php) | [Query Builder](https://chompthis.com/api/build.php) | | [Client Center](https://chompthis.com/api/manage.php) | |   # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BrandedFoodObjectDietFlags(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ingredient': 'str',
        'ingredient_description': 'str',
        'diet_label': 'str',
        'is_compatible': 'str',
        'compatibility_level': 'int',
        'compatibility_description': 'str',
        'is_allergen': 'bool'
    }

    attribute_map = {
        'ingredient': 'ingredient',
        'ingredient_description': 'ingredient_description',
        'diet_label': 'diet_label',
        'is_compatible': 'is_compatible',
        'compatibility_level': 'compatibility_level',
        'compatibility_description': 'compatibility_description',
        'is_allergen': 'is_allergen'
    }

    def __init__(self, ingredient=None, ingredient_description=None, diet_label=None, is_compatible=None, compatibility_level=None, compatibility_description=None, is_allergen=None):  # noqa: E501
        """BrandedFoodObjectDietFlags - a model defined in Swagger"""  # noqa: E501
        self._ingredient = None
        self._ingredient_description = None
        self._diet_label = None
        self._is_compatible = None
        self._compatibility_level = None
        self._compatibility_description = None
        self._is_allergen = None
        self.discriminator = None
        if ingredient is not None:
            self.ingredient = ingredient
        if ingredient_description is not None:
            self.ingredient_description = ingredient_description
        if diet_label is not None:
            self.diet_label = diet_label
        if is_compatible is not None:
            self.is_compatible = is_compatible
        if compatibility_level is not None:
            self.compatibility_level = compatibility_level
        if compatibility_description is not None:
            self.compatibility_description = compatibility_description
        if is_allergen is not None:
            self.is_allergen = is_allergen

    @property
    def ingredient(self):
        """Gets the ingredient of this BrandedFoodObjectDietFlags.  # noqa: E501

        Ingredient name  # noqa: E501

        :return: The ingredient of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: str
        """
        return self._ingredient

    @ingredient.setter
    def ingredient(self, ingredient):
        """Sets the ingredient of this BrandedFoodObjectDietFlags.

        Ingredient name  # noqa: E501

        :param ingredient: The ingredient of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: str
        """

        self._ingredient = ingredient

    @property
    def ingredient_description(self):
        """Gets the ingredient_description of this BrandedFoodObjectDietFlags.  # noqa: E501

        Description of the ingredient  # noqa: E501

        :return: The ingredient_description of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: str
        """
        return self._ingredient_description

    @ingredient_description.setter
    def ingredient_description(self, ingredient_description):
        """Sets the ingredient_description of this BrandedFoodObjectDietFlags.

        Description of the ingredient  # noqa: E501

        :param ingredient_description: The ingredient_description of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: str
        """

        self._ingredient_description = ingredient_description

    @property
    def diet_label(self):
        """Gets the diet_label of this BrandedFoodObjectDietFlags.  # noqa: E501

        Name of the diet with which this ingredient may not be compatible  # noqa: E501

        :return: The diet_label of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: str
        """
        return self._diet_label

    @diet_label.setter
    def diet_label(self, diet_label):
        """Sets the diet_label of this BrandedFoodObjectDietFlags.

        Name of the diet with which this ingredient may not be compatible  # noqa: E501

        :param diet_label: The diet_label of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: str
        """

        self._diet_label = diet_label

    @property
    def is_compatible(self):
        """Gets the is_compatible of this BrandedFoodObjectDietFlags.  # noqa: E501

        A description of if we believe this ingredient is compatible with the diet  # noqa: E501

        :return: The is_compatible of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: str
        """
        return self._is_compatible

    @is_compatible.setter
    def is_compatible(self, is_compatible):
        """Sets the is_compatible of this BrandedFoodObjectDietFlags.

        A description of if we believe this ingredient is compatible with the diet  # noqa: E501

        :param is_compatible: The is_compatible of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: str
        """

        self._is_compatible = is_compatible

    @property
    def compatibility_level(self):
        """Gets the compatibility_level of this BrandedFoodObjectDietFlags.  # noqa: E501

        A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility  # noqa: E501

        :return: The compatibility_level of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: int
        """
        return self._compatibility_level

    @compatibility_level.setter
    def compatibility_level(self, compatibility_level):
        """Sets the compatibility_level of this BrandedFoodObjectDietFlags.

        A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility  # noqa: E501

        :param compatibility_level: The compatibility_level of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: int
        """

        self._compatibility_level = compatibility_level

    @property
    def compatibility_description(self):
        """Gets the compatibility_description of this BrandedFoodObjectDietFlags.  # noqa: E501

        A description of how we graded this ingredient for compatibility with the diet  # noqa: E501

        :return: The compatibility_description of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: str
        """
        return self._compatibility_description

    @compatibility_description.setter
    def compatibility_description(self, compatibility_description):
        """Sets the compatibility_description of this BrandedFoodObjectDietFlags.

        A description of how we graded this ingredient for compatibility with the diet  # noqa: E501

        :param compatibility_description: The compatibility_description of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: str
        """

        self._compatibility_description = compatibility_description

    @property
    def is_allergen(self):
        """Gets the is_allergen of this BrandedFoodObjectDietFlags.  # noqa: E501

        Boolean representing if the ingredient is a known allergen  # noqa: E501

        :return: The is_allergen of this BrandedFoodObjectDietFlags.  # noqa: E501
        :rtype: bool
        """
        return self._is_allergen

    @is_allergen.setter
    def is_allergen(self, is_allergen):
        """Sets the is_allergen of this BrandedFoodObjectDietFlags.

        Boolean representing if the ingredient is a known allergen  # noqa: E501

        :param is_allergen: The is_allergen of this BrandedFoodObjectDietFlags.  # noqa: E501
        :type: bool
        """

        self._is_allergen = is_allergen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandedFoodObjectDietFlags, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandedFoodObjectDietFlags):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

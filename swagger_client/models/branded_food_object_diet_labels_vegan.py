# coding: utf-8

"""
    Chomp Food Database API Documentation

    ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php)   # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BrandedFoodObjectDietLabelsVegan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_compatible': 'bool',
        'compatibility_level': 'int',
        'confidence': 'int',
        'confidence_description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'is_compatible': 'is_compatible',
        'compatibility_level': 'compatibility_level',
        'confidence': 'confidence',
        'confidence_description': 'confidence_description'
    }

    def __init__(self, name=None, is_compatible=None, compatibility_level=None, confidence=None, confidence_description=None):  # noqa: E501
        """BrandedFoodObjectDietLabelsVegan - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._is_compatible = None
        self._compatibility_level = None
        self._confidence = None
        self._confidence_description = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if is_compatible is not None:
            self.is_compatible = is_compatible
        if compatibility_level is not None:
            self.compatibility_level = compatibility_level
        if confidence is not None:
            self.confidence = confidence
        if confidence_description is not None:
            self.confidence_description = confidence_description

    @property
    def name(self):
        """Gets the name of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501

        Diet name  # noqa: E501

        :return: The name of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandedFoodObjectDietLabelsVegan.

        Diet name  # noqa: E501

        :param name: The name of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_compatible(self):
        """Gets the is_compatible of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501

        Boolean describing if this item is compatible with this diet  # noqa: E501

        :return: The is_compatible of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :rtype: bool
        """
        return self._is_compatible

    @is_compatible.setter
    def is_compatible(self, is_compatible):
        """Sets the is_compatible of this BrandedFoodObjectDietLabelsVegan.

        Boolean describing if this item is compatible with this diet  # noqa: E501

        :param is_compatible: The is_compatible of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type: bool
        """

        self._is_compatible = is_compatible

    @property
    def compatibility_level(self):
        """Gets the compatibility_level of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501

        Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility  # noqa: E501

        :return: The compatibility_level of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :rtype: int
        """
        return self._compatibility_level

    @compatibility_level.setter
    def compatibility_level(self, compatibility_level):
        """Sets the compatibility_level of this BrandedFoodObjectDietLabelsVegan.

        Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility  # noqa: E501

        :param compatibility_level: The compatibility_level of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type: int
        """

        self._compatibility_level = compatibility_level

    @property
    def confidence(self):
        """Gets the confidence of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501

        Boolean that indicates if we are confident in how this item is graded for this diet  # noqa: E501

        :return: The confidence of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this BrandedFoodObjectDietLabelsVegan.

        Boolean that indicates if we are confident in how this item is graded for this diet  # noqa: E501

        :param confidence: The confidence of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type: int
        """

        self._confidence = confidence

    @property
    def confidence_description(self):
        """Gets the confidence_description of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501

        Description of our confidence that this item was graded correctly  # noqa: E501

        :return: The confidence_description of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :rtype: str
        """
        return self._confidence_description

    @confidence_description.setter
    def confidence_description(self, confidence_description):
        """Sets the confidence_description of this BrandedFoodObjectDietLabelsVegan.

        Description of our confidence that this item was graded correctly  # noqa: E501

        :param confidence_description: The confidence_description of this BrandedFoodObjectDietLabelsVegan.  # noqa: E501
        :type: str
        """

        self._confidence_description = confidence_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandedFoodObjectDietLabelsVegan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandedFoodObjectDietLabelsVegan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

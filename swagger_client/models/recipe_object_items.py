# coding: utf-8

"""
    Chomp Food & Recipe Database API Documentation

    ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php)   # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecipeObjectItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'meta': 'RecipeObjectMeta',
        'categories': 'list[str]',
        'author': 'str',
        'keywords': 'list[str]',
        'topics': 'list[str]',
        'attributes': 'RecipeObjectAttributes',
        'ingredients': 'list[RecipeObjectIngredients]',
        'base_ingredients': 'list[str]',
        'nutrients': 'RecipeObjectNutrients',
        'diabetic_exchanges': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'meta': 'meta',
        'categories': 'categories',
        'author': 'author',
        'keywords': 'keywords',
        'topics': 'topics',
        'attributes': 'attributes',
        'ingredients': 'ingredients',
        'base_ingredients': 'base_ingredients',
        'nutrients': 'nutrients',
        'diabetic_exchanges': 'diabetic_exchanges'
    }

    def __init__(self, id=None, title=None, meta=None, categories=None, author=None, keywords=None, topics=None, attributes=None, ingredients=None, base_ingredients=None, nutrients=None, diabetic_exchanges=None):  # noqa: E501
        """RecipeObjectItems - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._meta = None
        self._categories = None
        self._author = None
        self._keywords = None
        self._topics = None
        self._attributes = None
        self._ingredients = None
        self._base_ingredients = None
        self._nutrients = None
        self._diabetic_exchanges = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if meta is not None:
            self.meta = meta
        if categories is not None:
            self.categories = categories
        if author is not None:
            self.author = author
        if keywords is not None:
            self.keywords = keywords
        if topics is not None:
            self.topics = topics
        if attributes is not None:
            self.attributes = attributes
        if ingredients is not None:
            self.ingredients = ingredients
        if base_ingredients is not None:
            self.base_ingredients = base_ingredients
        if nutrients is not None:
            self.nutrients = nutrients
        if diabetic_exchanges is not None:
            self.diabetic_exchanges = diabetic_exchanges

    @property
    def id(self):
        """Gets the id of this RecipeObjectItems.  # noqa: E501

        Unique recipe ID  # noqa: E501

        :return: The id of this RecipeObjectItems.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecipeObjectItems.

        Unique recipe ID  # noqa: E501

        :param id: The id of this RecipeObjectItems.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this RecipeObjectItems.  # noqa: E501

        Recipe title  # noqa: E501

        :return: The title of this RecipeObjectItems.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RecipeObjectItems.

        Recipe title  # noqa: E501

        :param title: The title of this RecipeObjectItems.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def meta(self):
        """Gets the meta of this RecipeObjectItems.  # noqa: E501


        :return: The meta of this RecipeObjectItems.  # noqa: E501
        :rtype: RecipeObjectMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this RecipeObjectItems.


        :param meta: The meta of this RecipeObjectItems.  # noqa: E501
        :type: RecipeObjectMeta
        """

        self._meta = meta

    @property
    def categories(self):
        """Gets the categories of this RecipeObjectItems.  # noqa: E501


        :return: The categories of this RecipeObjectItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this RecipeObjectItems.


        :param categories: The categories of this RecipeObjectItems.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def author(self):
        """Gets the author of this RecipeObjectItems.  # noqa: E501

        The author of this recipe. You must attribute this author when displaying this recipe.  # noqa: E501

        :return: The author of this RecipeObjectItems.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this RecipeObjectItems.

        The author of this recipe. You must attribute this author when displaying this recipe.  # noqa: E501

        :param author: The author of this RecipeObjectItems.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def keywords(self):
        """Gets the keywords of this RecipeObjectItems.  # noqa: E501


        :return: The keywords of this RecipeObjectItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this RecipeObjectItems.


        :param keywords: The keywords of this RecipeObjectItems.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def topics(self):
        """Gets the topics of this RecipeObjectItems.  # noqa: E501


        :return: The topics of this RecipeObjectItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this RecipeObjectItems.


        :param topics: The topics of this RecipeObjectItems.  # noqa: E501
        :type: list[str]
        """

        self._topics = topics

    @property
    def attributes(self):
        """Gets the attributes of this RecipeObjectItems.  # noqa: E501


        :return: The attributes of this RecipeObjectItems.  # noqa: E501
        :rtype: RecipeObjectAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RecipeObjectItems.


        :param attributes: The attributes of this RecipeObjectItems.  # noqa: E501
        :type: RecipeObjectAttributes
        """

        self._attributes = attributes

    @property
    def ingredients(self):
        """Gets the ingredients of this RecipeObjectItems.  # noqa: E501

        An array containing this recipe's ingredients  # noqa: E501

        :return: The ingredients of this RecipeObjectItems.  # noqa: E501
        :rtype: list[RecipeObjectIngredients]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this RecipeObjectItems.

        An array containing this recipe's ingredients  # noqa: E501

        :param ingredients: The ingredients of this RecipeObjectItems.  # noqa: E501
        :type: list[RecipeObjectIngredients]
        """

        self._ingredients = ingredients

    @property
    def base_ingredients(self):
        """Gets the base_ingredients of this RecipeObjectItems.  # noqa: E501


        :return: The base_ingredients of this RecipeObjectItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_ingredients

    @base_ingredients.setter
    def base_ingredients(self, base_ingredients):
        """Sets the base_ingredients of this RecipeObjectItems.


        :param base_ingredients: The base_ingredients of this RecipeObjectItems.  # noqa: E501
        :type: list[str]
        """

        self._base_ingredients = base_ingredients

    @property
    def nutrients(self):
        """Gets the nutrients of this RecipeObjectItems.  # noqa: E501


        :return: The nutrients of this RecipeObjectItems.  # noqa: E501
        :rtype: RecipeObjectNutrients
        """
        return self._nutrients

    @nutrients.setter
    def nutrients(self, nutrients):
        """Sets the nutrients of this RecipeObjectItems.


        :param nutrients: The nutrients of this RecipeObjectItems.  # noqa: E501
        :type: RecipeObjectNutrients
        """

        self._nutrients = nutrients

    @property
    def diabetic_exchanges(self):
        """Gets the diabetic_exchanges of this RecipeObjectItems.  # noqa: E501


        :return: The diabetic_exchanges of this RecipeObjectItems.  # noqa: E501
        :rtype: list[str]
        """
        return self._diabetic_exchanges

    @diabetic_exchanges.setter
    def diabetic_exchanges(self, diabetic_exchanges):
        """Sets the diabetic_exchanges of this RecipeObjectItems.


        :param diabetic_exchanges: The diabetic_exchanges of this RecipeObjectItems.  # noqa: E501
        :type: list[str]
        """

        self._diabetic_exchanges = diabetic_exchanges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipeObjectItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipeObjectItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Chomp Food & Recipe Database API Documentation

    ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php)   # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecipeObjectMetaImages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extra_large': 'str',
        'large': 'str',
        'standard': 'str',
        'grid_view': 'str',
        'small': 'str',
        'thumbnail': 'str',
        'extra_small': 'str'
    }

    attribute_map = {
        'extra_large': 'extra_large',
        'large': 'large',
        'standard': 'standard',
        'grid_view': 'grid_view',
        'small': 'small',
        'thumbnail': 'thumbnail',
        'extra_small': 'extra_small'
    }

    def __init__(self, extra_large=None, large=None, standard=None, grid_view=None, small=None, thumbnail=None, extra_small=None):  # noqa: E501
        """RecipeObjectMetaImages - a model defined in Swagger"""  # noqa: E501
        self._extra_large = None
        self._large = None
        self._standard = None
        self._grid_view = None
        self._small = None
        self._thumbnail = None
        self._extra_small = None
        self.discriminator = None
        if extra_large is not None:
            self.extra_large = extra_large
        if large is not None:
            self.large = large
        if standard is not None:
            self.standard = standard
        if grid_view is not None:
            self.grid_view = grid_view
        if small is not None:
            self.small = small
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if extra_small is not None:
            self.extra_small = extra_small

    @property
    def extra_large(self):
        """Gets the extra_large of this RecipeObjectMetaImages.  # noqa: E501

        Extra large recipe image  # noqa: E501

        :return: The extra_large of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._extra_large

    @extra_large.setter
    def extra_large(self, extra_large):
        """Sets the extra_large of this RecipeObjectMetaImages.

        Extra large recipe image  # noqa: E501

        :param extra_large: The extra_large of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._extra_large = extra_large

    @property
    def large(self):
        """Gets the large of this RecipeObjectMetaImages.  # noqa: E501

        Large recipe image  # noqa: E501

        :return: The large of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._large

    @large.setter
    def large(self, large):
        """Sets the large of this RecipeObjectMetaImages.

        Large recipe image  # noqa: E501

        :param large: The large of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._large = large

    @property
    def standard(self):
        """Gets the standard of this RecipeObjectMetaImages.  # noqa: E501

        Standard recipe image  # noqa: E501

        :return: The standard of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this RecipeObjectMetaImages.

        Standard recipe image  # noqa: E501

        :param standard: The standard of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._standard = standard

    @property
    def grid_view(self):
        """Gets the grid_view of this RecipeObjectMetaImages.  # noqa: E501

        Grid view recipe image  # noqa: E501

        :return: The grid_view of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._grid_view

    @grid_view.setter
    def grid_view(self, grid_view):
        """Sets the grid_view of this RecipeObjectMetaImages.

        Grid view recipe image  # noqa: E501

        :param grid_view: The grid_view of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._grid_view = grid_view

    @property
    def small(self):
        """Gets the small of this RecipeObjectMetaImages.  # noqa: E501

        Small recipe image  # noqa: E501

        :return: The small of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._small

    @small.setter
    def small(self, small):
        """Sets the small of this RecipeObjectMetaImages.

        Small recipe image  # noqa: E501

        :param small: The small of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._small = small

    @property
    def thumbnail(self):
        """Gets the thumbnail of this RecipeObjectMetaImages.  # noqa: E501

        Thumbnail recipe image  # noqa: E501

        :return: The thumbnail of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this RecipeObjectMetaImages.

        Thumbnail recipe image  # noqa: E501

        :param thumbnail: The thumbnail of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def extra_small(self):
        """Gets the extra_small of this RecipeObjectMetaImages.  # noqa: E501

        Extra small recipe image  # noqa: E501

        :return: The extra_small of this RecipeObjectMetaImages.  # noqa: E501
        :rtype: str
        """
        return self._extra_small

    @extra_small.setter
    def extra_small(self, extra_small):
        """Sets the extra_small of this RecipeObjectMetaImages.

        Extra small recipe image  # noqa: E501

        :param extra_small: The extra_small of this RecipeObjectMetaImages.  # noqa: E501
        :type: str
        """

        self._extra_small = extra_small

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipeObjectMetaImages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipeObjectMetaImages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

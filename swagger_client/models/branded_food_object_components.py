# coding: utf-8

"""
    Chomp Food Database API Documentation

    ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ||| | ------- | -------- | | [Knowledge Base](https://desk.zoho.com/portal/chompthis/kb/chomp) | [Pricing](https://chompthis.com/api/) | | [Attribution](https://chompthis.com/api/docs/attribution.php) | [Cost Calculator](https://chompthis.com/api/cost-calculator.php) | | [Terms & License](https://chompthis.com/api/terms.php) | [Database Search](https://chompthis.com/api/lookup.php) | | [Support](https://chompthis.com/api/ticket-new.php) | [Query Builder](https://chompthis.com/api/build.php) | | [Client Center](https://chompthis.com/api/manage.php) | |   # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BrandedFoodObjectComponents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'pct_weight': 'float',
        'gram_weight': 'float',
        'is_refuse': 'bool',
        'data_points': 'int'
    }

    attribute_map = {
        'name': 'name',
        'pct_weight': 'pct_weight',
        'gram_weight': 'gram_weight',
        'is_refuse': 'is_refuse',
        'data_points': 'data_points'
    }

    def __init__(self, name=None, pct_weight=None, gram_weight=None, is_refuse=None, data_points=None):  # noqa: E501
        """BrandedFoodObjectComponents - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._pct_weight = None
        self._gram_weight = None
        self._is_refuse = None
        self._data_points = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if pct_weight is not None:
            self.pct_weight = pct_weight
        if gram_weight is not None:
            self.gram_weight = gram_weight
        if is_refuse is not None:
            self.is_refuse = is_refuse
        if data_points is not None:
            self.data_points = data_points

    @property
    def name(self):
        """Gets the name of this BrandedFoodObjectComponents.  # noqa: E501

        The kind of component, e.g. bone  # noqa: E501

        :return: The name of this BrandedFoodObjectComponents.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrandedFoodObjectComponents.

        The kind of component, e.g. bone  # noqa: E501

        :param name: The name of this BrandedFoodObjectComponents.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pct_weight(self):
        """Gets the pct_weight of this BrandedFoodObjectComponents.  # noqa: E501

        The weight of the component as a percentage of the total weight of the food  # noqa: E501

        :return: The pct_weight of this BrandedFoodObjectComponents.  # noqa: E501
        :rtype: float
        """
        return self._pct_weight

    @pct_weight.setter
    def pct_weight(self, pct_weight):
        """Sets the pct_weight of this BrandedFoodObjectComponents.

        The weight of the component as a percentage of the total weight of the food  # noqa: E501

        :param pct_weight: The pct_weight of this BrandedFoodObjectComponents.  # noqa: E501
        :type: float
        """

        self._pct_weight = pct_weight

    @property
    def gram_weight(self):
        """Gets the gram_weight of this BrandedFoodObjectComponents.  # noqa: E501

        The weight of the component in grams  # noqa: E501

        :return: The gram_weight of this BrandedFoodObjectComponents.  # noqa: E501
        :rtype: float
        """
        return self._gram_weight

    @gram_weight.setter
    def gram_weight(self, gram_weight):
        """Sets the gram_weight of this BrandedFoodObjectComponents.

        The weight of the component in grams  # noqa: E501

        :param gram_weight: The gram_weight of this BrandedFoodObjectComponents.  # noqa: E501
        :type: float
        """

        self._gram_weight = gram_weight

    @property
    def is_refuse(self):
        """Gets the is_refuse of this BrandedFoodObjectComponents.  # noqa: E501

        Whether the component is refuse, i.e. not edible  # noqa: E501

        :return: The is_refuse of this BrandedFoodObjectComponents.  # noqa: E501
        :rtype: bool
        """
        return self._is_refuse

    @is_refuse.setter
    def is_refuse(self, is_refuse):
        """Sets the is_refuse of this BrandedFoodObjectComponents.

        Whether the component is refuse, i.e. not edible  # noqa: E501

        :param is_refuse: The is_refuse of this BrandedFoodObjectComponents.  # noqa: E501
        :type: bool
        """

        self._is_refuse = is_refuse

    @property
    def data_points(self):
        """Gets the data_points of this BrandedFoodObjectComponents.  # noqa: E501

        The number of obersvations on which the measure is based  # noqa: E501

        :return: The data_points of this BrandedFoodObjectComponents.  # noqa: E501
        :rtype: int
        """
        return self._data_points

    @data_points.setter
    def data_points(self, data_points):
        """Sets the data_points of this BrandedFoodObjectComponents.

        The number of obersvations on which the measure is based  # noqa: E501

        :param data_points: The data_points of this BrandedFoodObjectComponents.  # noqa: E501
        :type: int
        """

        self._data_points = data_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrandedFoodObjectComponents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrandedFoodObjectComponents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

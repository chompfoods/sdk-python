# coding: utf-8

"""
    Chomp Food & Recipe Database API Documentation

    ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php)   # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecipeObjectAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prep_time': 'str',
        'total_time': 'str',
        'servings': 'str',
        'serving_size': 'str'
    }

    attribute_map = {
        'prep_time': 'prep_time',
        'total_time': 'total_time',
        'servings': 'servings',
        'serving_size': 'serving_size'
    }

    def __init__(self, prep_time=None, total_time=None, servings=None, serving_size=None):  # noqa: E501
        """RecipeObjectAttributes - a model defined in Swagger"""  # noqa: E501
        self._prep_time = None
        self._total_time = None
        self._servings = None
        self._serving_size = None
        self.discriminator = None
        if prep_time is not None:
            self.prep_time = prep_time
        if total_time is not None:
            self.total_time = total_time
        if servings is not None:
            self.servings = servings
        if serving_size is not None:
            self.serving_size = serving_size

    @property
    def prep_time(self):
        """Gets the prep_time of this RecipeObjectAttributes.  # noqa: E501

        The time it takes to prep this recipe  # noqa: E501

        :return: The prep_time of this RecipeObjectAttributes.  # noqa: E501
        :rtype: str
        """
        return self._prep_time

    @prep_time.setter
    def prep_time(self, prep_time):
        """Sets the prep_time of this RecipeObjectAttributes.

        The time it takes to prep this recipe  # noqa: E501

        :param prep_time: The prep_time of this RecipeObjectAttributes.  # noqa: E501
        :type: str
        """

        self._prep_time = prep_time

    @property
    def total_time(self):
        """Gets the total_time of this RecipeObjectAttributes.  # noqa: E501

        The total time it takes to make this recipe  # noqa: E501

        :return: The total_time of this RecipeObjectAttributes.  # noqa: E501
        :rtype: str
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this RecipeObjectAttributes.

        The total time it takes to make this recipe  # noqa: E501

        :param total_time: The total_time of this RecipeObjectAttributes.  # noqa: E501
        :type: str
        """

        self._total_time = total_time

    @property
    def servings(self):
        """Gets the servings of this RecipeObjectAttributes.  # noqa: E501

        The number of servings this recipe makes  # noqa: E501

        :return: The servings of this RecipeObjectAttributes.  # noqa: E501
        :rtype: str
        """
        return self._servings

    @servings.setter
    def servings(self, servings):
        """Sets the servings of this RecipeObjectAttributes.

        The number of servings this recipe makes  # noqa: E501

        :param servings: The servings of this RecipeObjectAttributes.  # noqa: E501
        :type: str
        """

        self._servings = servings

    @property
    def serving_size(self):
        """Gets the serving_size of this RecipeObjectAttributes.  # noqa: E501

        The size of each serving  # noqa: E501

        :return: The serving_size of this RecipeObjectAttributes.  # noqa: E501
        :rtype: str
        """
        return self._serving_size

    @serving_size.setter
    def serving_size(self, serving_size):
        """Sets the serving_size of this RecipeObjectAttributes.

        The size of each serving  # noqa: E501

        :param serving_size: The serving_size of this RecipeObjectAttributes.  # noqa: E501
        :type: str
        """

        self._serving_size = serving_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecipeObjectAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecipeObjectAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
